for (i in seq_along(coord)){
joinname<-rbind(joinname,tibble(locationid=coord[[i]],menuid=i))
}
joinname
menu_join<-menu_name[index,]%>%mutate(id=row_number())
menu_join
seq_along(coord)
joinname<-NULL
for (i in seq_along(coord)){
joinname<-rbind(joinname,tibble(locationid=coord[[i]],menuid=i))
}
joinname
menu_join
menu_join<-menu_name[index,]%>%mutate(menuid=row_number())
menu_join
joinname
location_name%>%ungroup%>%mutate(locationid=row_number())
location_name%>%ungroup%>%mutate(locationid=row_number())%>%right_join(joinname,by=c("locationid"="locationid"))
location_join<-location_name%>%ungroup%>%mutate(locationid=row_number())%>%right_join(joinname,by=c("locationid"="locationid"))%>%unnest%>%group_by(menuid)%>%nest
location_join
menu_join
inner_join(menu_join,location_join,by=c("menuid"="menuid"))
location_join
menu_join
location_join
menu_join<-menu_name[index,]%>%ungroup%>%mutate(menuid=row_number())
menu_join
inner_join(menu_join,location_join,by=c("menuid"="menuid"))
location_join<-location_name%>%ungroup%>%mutate(locationid=row_number())%>%right_join(joinname,by=c("locationid"="locationid"))%>%unnest%>%group_by(menuid)%>%nest
location_join
loc_info<-inner_join(menu_join,location_join,by=c("menuid"="menuid"))%>%unnest%>%select(restaurant,BORO,BUILDING,STREET,ZIPCODE,Latitude,Longitude)%>%group_by(restaurant)%>%nest()%>%rename("location"=data)
loc_info
menu_nutrition_location<-left_join(loc_info,menu_info,by="restaurant")
menu_nutrition_location
menu_nutrition_location%>%select(location)%>%unnest
(menu_nutrition_location%>%select(location))[8,%>%unnest
(menu_nutrition_location%>%select(location))[8,]%>%unnest
menu_nutrition_location%>%select(location)->x
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
menu_raw <-read_csv("C:/Users/jiaoh/OneDrive/桌面/MenuStat.csv")
location_raw <- read_csv("C:/Users/jiaoh/OneDrive/桌面/NY Restaurant Location.csv")
menu<-menu_raw[,-c(19,24:45)]# no nutrition_text and nutrition_100g col, potassium col (since only 5k entry have value)
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu=data)
menu_name<-menu%>%group_by(restaurant)%>%summarise(n=n())%>%arrange(desc(n))
x<-location_raw%>%group_by(CAMIS)%>%arrange(desc(`INSPECTION DATE`))%>%select(CAMIS,BORO:ZIPCODE,`INSPECTION DATE`,Latitude,Longitude)%>%unique%>%top_n(1,`INSPECTION DATE`)
location<-location_raw%>%select(CAMIS,DBA)%>%unique
res_location<- left_join(x,location)
location_name<-res_location%>%group_by(DBA)%>%nest()
name_menu<-menu_name$restaurant%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
name_loc<-location_name$DBA%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
xx<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T)) #index
yy<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T,value = T)) #matched name
index<-xx%>%map(~(length(.x)>0))%>%unlist #successful matched index in menu
coord<-xx[index]                          #successful matched cor in location
# yy[index] ## check
# name_menu[index]  #matched store
# name_menu[!index] #unmatched store
joinname<-NULL
for (i in seq_along(coord)){
joinname<-rbind(joinname,tibble(locationid=coord[[i]],menuid=i))
}
menu_join<-menu_name[index,]%>%ungroup%>%mutate(menuid=row_number())
location_join<-location_name%>%ungroup%>%mutate(locationid=row_number())%>%right_join(joinname,by=c("locationid"="locationid"))%>%unnest%>%group_by(menuid)%>%nest
loc_info<-inner_join(menu_join,location_join,by=c("menuid"="menuid"))%>%unnest%>%select(restaurant,BORO,BUILDING,STREET,ZIPCODE,Latitude,Longitude)%>%group_by(restaurant)%>%nest()%>%rename("location"=data)
menu_nutrition_location<-left_join(loc_info,menu_info,by="restaurant")
save(menu_nutrition_location, file="../output/menu_nutrition_location.RDatautrition_location.RData")
menu_raw <-read_csv("../data/MenuStat.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
menu_raw <-read_csv("../data/MenuStat.csv")
# This file is more than 100 MB, please download (in readme) and load it by yourself.
location_raw <- read_csv("C:/Users/jiaoh/OneDrive/桌面/NY Restaurant Location.csv")
menu<-menu_raw[,-c(19,24:45)]# no nutrition_text and nutrition_100g col, potassium col (since only 5k entry have value)
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu=data)
menu_name<-menu%>%group_by(restaurant)%>%summarise(n=n())%>%arrange(desc(n))
x<-location_raw%>%group_by(CAMIS)%>%arrange(desc(`INSPECTION DATE`))%>%select(CAMIS,BORO:ZIPCODE,`INSPECTION DATE`,Latitude,Longitude)%>%unique%>%top_n(1,`INSPECTION DATE`)
location<-location_raw%>%select(CAMIS,DBA)%>%unique
res_location<- left_join(x,location)
location_name<-res_location%>%group_by(DBA)%>%nest()
name_menu<-menu_name$restaurant%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
name_loc<-location_name$DBA%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
xx<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T)) #index
yy<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T,value = T)) #matched name
index<-xx%>%map(~(length(.x)>0))%>%unlist #successful matched index in menu
coord<-xx[index]                          #successful matched cor in location
# yy[index] ## check
# name_menu[index]  #matched store
# name_menu[!index] #unmatched store
joinname<-NULL
for (i in seq_along(coord)){
joinname<-rbind(joinname,tibble(locationid=coord[[i]],menuid=i))
}
menu_join<-menu_name[index,]%>%ungroup%>%mutate(menuid=row_number())
location_join<-location_name%>%ungroup%>%mutate(locationid=row_number())%>%right_join(joinname,by=c("locationid"="locationid"))%>%unnest%>%group_by(menuid)%>%nest
loc_info<-inner_join(menu_join,location_join,by=c("menuid"="menuid"))%>%unnest%>%select(restaurant,BORO,BUILDING,STREET,ZIPCODE,Latitude,Longitude)%>%group_by(restaurant)%>%nest()%>%rename("location"=data)
menu_nutrition_location<-left_join(loc_info,menu_info,by="restaurant")
save(menu_nutrition_location, file="../output/menu_nutrition_location.RDatautrition_location.RData")
library(tidyverse)
library(tidyverse)
menu_raw <-read_csv("../data/MenuStat.csv")
# This file is more than 100 MB, please download (url given in readme) and load it by yourself.
location_raw <- read_csv("C:/Users/jiaoh/OneDrive/桌面/NY Restaurant Location.csv")
menu<-menu_raw[,-c(19,24:45)]# no nutrition_text and nutrition_100g col, potassium col (since only 5k entry have value)
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu=data)
menu_name<-menu%>%group_by(restaurant)%>%summarise(n=n())%>%arrange(desc(n))
menu<-menu_raw[,-c(19,24:45)]# no nutrition_text and nutrition_100g col, potassium col (since only 5k entry have value)
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu=data)
menu_name<-menu%>%group_by(restaurant)%>%summarise(n=n())%>%arrange(desc(n))
x<-location_raw%>%group_by(CAMIS)%>%arrange(desc(`INSPECTION DATE`))%>%
select(CAMIS,BORO:ZIPCODE,`INSPECTION DATE`,Latitude,Longitude)%>%
unique%>%top_n(1,`INSPECTION DATE`)
location<-location_raw%>%select(CAMIS,DBA)%>%unique
res_location<- left_join(x,location)
location_name<-res_location%>%group_by(DBA)%>%nest()
#Replace the name of restaurant in order to make matching process easier.
name_menu<-menu_name$restaurant%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
name_loc<-location_name$DBA%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
xx<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T)) #index
yy<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T,value = T)) #matched name
index<-xx%>%map(~(length(.x)>0))%>%unlist #successful matched index in menu
coord<-xx[index]                          #successful matched cor in location
# yy[index] ## check
# name_menu[index]  #matched store
# name_menu[!index] #unmatched store
joinname<-NULL
for (i in seq_along(coord)){
joinname<-rbind(joinname,tibble(locationid=coord[[i]],menuid=i))
}
menu_join<-menu_name[index,]%>%ungroup%>%mutate(menuid=row_number())
location_join<-location_name%>%ungroup%>%mutate(locationid=row_number())%>%right_join(joinname,by=c("locationid"="locationid"))%>%unnest%>%group_by(menuid)%>%nest
loc_info<-inner_join(menu_join,location_join,by=c("menuid"="menuid"))%>%unnest%>%select(restaurant,BORO,BUILDING,STREET,ZIPCODE,Latitude,Longitude)%>%group_by(restaurant)%>%nest()%>%rename("location"=data)
menu_nutrition_location<-left_join(loc_info,menu_info,by="restaurant")
# Delete nutrition_text and nutrition_100g col, potassium col (since only 5k entry have value)
menu<-menu_raw[,-c(19,24:45)]
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu=data)
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu=data)
menu_info
menu_name
x
location<-location_raw%>%select(CAMIS,DBA)%>%unique
.location
location
location_name<-location_raw%>%select(CAMIS,DBA)%>%unique
res_location<- left_join(x,location_name)
location_name<-res_location%>%group_by(DBA)%>%nest()
location_name
# Restaurant name from "location"
location<-location_raw%>%select(CAMIS,DBA)%>%unique
res_location<- left_join(x,location)
res_location
location_name<-res_location%>%group_by(DBA)%>%nest()
location_name
res_location
# Nested Location information
location_name<- left_join(x,location)%>%group_by(DBA)%>%nest()
xx<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T))           #matched index
xx<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T))           #matched index
yy<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T,value = T)) #matched name
menu_join
location_join
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
menu_raw <-read_csv("../data/MenuStat.csv")
# This file is more than 100 MB, please download (url given in readme) and load it by yourself.
location_raw <- read_csv("C:/Users/jiaoh/OneDrive/桌面/NY Restaurant Location.csv")
# Delete nutrition_text and nutrition_100g col, potassium col (since only 5k entry have value)
menu<-menu_raw[,-c(19,24:45)]
# Nested menu information
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu=data)
# Restaurant name from "menu"
menu_name<-menu%>%group_by(restaurant)%>%summarise(n=n())%>%arrange(desc(n))
# Restaurant location
x<-location_raw%>%group_by(CAMIS)%>%arrange(desc(`INSPECTION DATE`))%>%
select(CAMIS,BORO:ZIPCODE,`INSPECTION DATE`,Latitude,Longitude)%>%
unique%>%top_n(1,`INSPECTION DATE`)
# Restaurant name from "location"
location<-location_raw%>%select(CAMIS,DBA)%>%unique
# Nested Location information
location_name<- left_join(x,location)%>%group_by(DBA)%>%nest()
#Replace the name of restaurant in order to make matching process easier.
name_menu<-menu_name$restaurant%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
name_loc<-location_name$DBA%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
xx<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T))           #matched index
yy<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T,value = T)) #matched name
index<-xx%>%map(~(length(.x)>0))%>%unlist #successful matched index in menu
coord<-xx[index]                          #successful matched coordinate in location
# yy[index] ## check
# name_menu[index]  #matched store
# name_menu[!index] #unmatched store
joinname<-NULL
for (i in seq_along(coord)){
joinname<-rbind(joinname,tibble(locationid=coord[[i]],menuid=i))
}
menu_join<-menu_name[index,]%>%ungroup%>%mutate(menuid=row_number())
location_join<-location_name%>%ungroup%>%mutate(locationid=row_number())%>%right_join(joinname,by=c("locationid"="locationid"))%>%unnest%>%group_by(menuid)%>%nest
loc_info<-inner_join(menu_join,location_join,by=c("menuid"="menuid"))%>%unnest%>%
select(restaurant,BORO,BUILDING,STREET,ZIPCODE,Latitude,Longitude)%>%group_by(restaurant)%>%
nest()%>%rename("location"=data)
menu_nutrition_location<-left_join(loc_info,menu_info,by="restaurant")
save(menu_nutrition_location, file="../output/menu_nutrition_location.RDatautrition_location.RData")
menu_nutrition_location
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
menu_raw <-read_csv("../data/MenuStat.csv")
# This file is more than 100 MB, please download (url given in readme) and load it by yourself.
location_raw <- read_csv("C:/Users/jiaoh/OneDrive/桌面/NY Restaurant Location.csv")
# Delete nutrition_text and nutrition_100g col, potassium col (since only 5k entry have value)
menu<-menu_raw[,-c(19,24:45)]
# Nested menu information
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu=data)
# Restaurant name from "menu"
menu_name<-menu%>%group_by(restaurant)%>%summarise(n=n())%>%arrange(desc(n))
# Restaurant location
x<-location_raw%>%group_by(CAMIS)%>%arrange(desc(`INSPECTION DATE`))%>%
select(CAMIS,BORO:ZIPCODE,`INSPECTION DATE`,Latitude,Longitude)%>%
unique%>%top_n(1,`INSPECTION DATE`)
# Restaurant name from "location"
location<-location_raw%>%select(CAMIS,DBA)%>%unique
# Nested Location information
location_name<- left_join(x,location)%>%group_by(DBA)%>%nest()
#Replace the name of restaurant in order to make matching process easier.
name_menu<-menu_name$restaurant%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
name_loc<-location_name$DBA%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
xx<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T))           #matched index
yy<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T,value = T)) #matched name
index<-xx%>%map(~(length(.x)>0))%>%unlist #successful matched index in menu
coord<-xx[index]                          #successful matched coordinate in location
# yy[index] ## check
# name_menu[index]  #matched store
# name_menu[!index] #unmatched store
joinname<-NULL
for (i in seq_along(coord)){
joinname<-rbind(joinname,tibble(locationid=coord[[i]],menuid=i))
}
menu_join<-menu_name[index,]%>%ungroup%>%mutate(menuid=row_number())
location_join<-location_name%>%ungroup%>%mutate(locationid=row_number())%>%right_join(joinname,by=c("locationid"="locationid"))%>%unnest%>%group_by(menuid)%>%nest
loc_info<-inner_join(menu_join,location_join,by=c("menuid"="menuid"))%>%unnest%>%
select(restaurant,BORO,BUILDING,STREET,ZIPCODE,Latitude,Longitude)%>%group_by(restaurant)%>%
nest()%>%rename("location"=data)
menu_nutrition_location<-left_join(loc_info,menu_info,by="restaurant")
save(menu_nutrition_location, file="../output/menu_nutrition_location.RDatautrition_location.RData")
name_menu[index]
knitr::opts_chunk$set(echo = TRUE)
packages.used=c("shiny", "leaflet","plotly","sodium_contenta.table","shinyWidgets","googleVis","geosphere","leaflet.extras","shinythemes","ggmap","dplyr","‘RColorBrewer","viridis","gridextra")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(shiny)
library(leaflet)
library(plotly)
library(shinyWidgets)
library(googleVis)
library(geosphere)
library(leaflet.extras)
library(shinythemes)
library(ggmap)
library(dplyr)
library(RColorBrewer)
library(viridis)
library(gridExtra)
load('C:/Users/tramh/Documents/GitHub/Spring2020-Project2-group-8/output/menu_nutrition_location_catagory.Rsodium_contenta')
load("C:/Users/jiaoh/Documents/GitHub/Spring2020-Project2-group-8/output/menu_nutrition_location_catagory.RData")
knitr::opts_chunk$set(echo = TRUE)
packages.used=c("shiny", "leaflet","plotly","sodium_contenta.table","shinyWidgets","googleVis","geosphere","leaflet.extras","shinythemes","ggmap","dplyr","‘RColorBrewer","viridis","gridextra")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(shiny)
library(leaflet)
library(plotly)
library(shinyWidgets)
library(googleVis)
library(geosphere)
library(leaflet.extras)
library(shinythemes)
library(ggmap)
library(dplyr)
library(RColorBrewer)
library(viridis)
library(gridExtra)
# load('C:/Users/tramh/Documents/GitHub/Spring2020-Project2-group-8/output/menu_nutrition_location_catagory.Rsodium_contenta')
menu_clean <- menu_nutrition_location_catagory
subset_nutrition <-menu_clean %>%select(restaurant,menu)%>%unnest(menu)%>%
select(restaurant,Item_Name,Item_Description,Food_Category,Calories:Dietary_Fiber,Shareable)%>%
filter(Shareable==0)%>%select(-Potassium,-Shareable)%>%group_by(restaurant)%>%arrange(restaurant)%>%nest()%>%ungroup%>%mutate(restaurant_id=row_number())%>%group_by(restaurant)%>%unnest()%>%mutate(menu_id=row_number())%>%
select(restaurant_id,restaurant,menu_id,Item_Name,Item_Description,Food_Category,everything())
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
#
# packages.used=c("shiny", "leaflet","plotly","sodium_contenta.table","shinyWidgets","googleVis","geosphere","leaflet.extras","shinythemes","ggmap","dplyr","‘RColorBrewer","viridis","gridextra")
# packages.needed=setdiff(packages.used,
#                         intersect(installed.packages()[,1],
#                                   packages.used))
#
# if(length(packages.needed)>0){
#   install.packages(packages.needed, dependencies = TRUE)
# }
# library(shiny)
# library(leaflet)
# library(plotly)
# library(shinyWidgets)
# library(googleVis)
# library(geosphere)
# library(leaflet.extras)
# library(shinythemes)
# library(ggmap)
# library(dplyr)
# library(RColorBrewer)
# library(viridis)
# library(gridExtra)
# load('C:/Users/tramh/Documents/GitHub/Spring2020-Project2-group-8/output/menu_nutrition_location_catagory.Rsodium_contenta')
menu_clean <- menu_nutrition_location_catagory
subset_nutrition <-menu_clean %>%select(restaurant,menu)%>%unnest(menu)%>%
select(restaurant,Item_Name,Item_Description,Food_Category,Calories:Dietary_Fiber,Shareable)%>%
filter(Shareable==0)%>%select(-Potassium,-Shareable)%>%group_by(restaurant)%>%arrange(restaurant)%>%nest()%>%ungroup%>%mutate(restaurant_id=row_number())%>%group_by(restaurant)%>%unnest()%>%mutate(menu_id=row_number())%>%
select(restaurant_id,restaurant,menu_id,Item_Name,Item_Description,Food_Category,everything())
colname<-subset_nutrition%>%colnames()
nutrition<-colname[9:18]
food_category<-subset_nutrition$Food_Category%>%unique()
subset_nutrition$Calories[which(is.na(subset_nutrition$Calories))] = 0
subset_nutrition$Total_Fat[which(is.na(subset_nutrition$Total_Fat))] = 0
subset_nutrition$Saturated_Fat[which(is.na(subset_nutrition$Saturated_Fat))] = 0
subset_nutrition$Trans_Fat[which(is.na(subset_nutrition$Trans_Fat))] = 0
subset_nutrition$Cholesterol[which(is.na(subset_nutrition$Cholesterol))] = 0
subset_nutrition$Sodium[which(is.na(subset_nutrition$Sodium))] = 0
subset_nutrition$Carbohydrates[which(is.na(subset_nutrition$Carbohydrates))] = 0
subset_nutrition$Protein[which(is.na(subset_nutrition$Protein))] = 0
subset_nutrition$Sugar[which(is.na(subset_nutrition$Sugar))] = 0
subset_nutrition$Dietary_Fiber[which(is.na(subset_nutrition$Dietary_Fiber))] = 0
new_col<-c("grey50", "blue","hotpink","Magenta","orange", "red","seagreen","violet","brown","maroon","navyblue", "yellow")
p1 <- plot_ly(x = subset_nutrition$Food_Category,  y = subset_nutrition$Calories,color = subset_nutrition$Food_Category,colors = new_col, type = "box")%>%
layout(title = "Calories",
xaxis = list(title = ""),
yaxis = list(title = "Calories"),
showlegend=FALSE,
autosize = T)
p1
p2 <- plot_ly(x = subset_nutrition$Food_Category, y=subset_nutrition$Protein,color = subset_nutrition$Food_Category,colors =new_col , type = "box")%>%
layout(title = "Protein",
xaxis = list(title = ""),
yaxis = list(title = ""),
showlegend=FALSE,
autosize = T)
p2
p3 <- plot_ly(x = subset_nutrition$Food_Category, y=subset_nutrition$Total_Fat,color = subset_nutrition$Food_Category,colors =new_col , type = "box") %>%
layout(title = "Total Fat",
xaxis = list(title = ""),
yaxis = list(title = ""),
showlegend=FALSE,
autosize = T)
p3
P4 <- plot_ly(x = subset_nutrition$Food_Category, y=subset_nutrition$Cholesterol,color = subset_nutrition$Food_Category,colors =new_col , type = "box") %>%
layout(title = "Cholesterol",
xaxis = list(title = ""),
yaxis = list(title = ""),
showlegend=FALSE,
autosize = T)
P4
cholesterol_content<-subset_nutrition%>% select(restaurant,Food_Category,Cholesterol)%>% group_by(Food_Category)%>%summarise(tcholesterol = sum(Cholesterol))
cholesterol_content
high_ch <- cholesterol_content%>%arrange(desc(tcholesterol))%>% head(6)
p5<-plot_ly(x= high_ch$Food_Category,y=high_ch$tcholesterol,
color = high_ch$food_category,type="bar")%>%layout(title="High Cholesterol Category",height=400)
p5
low_ch <-cholesterol_content%>%arrange(desc(tcholesterol))%>% tail(6)
p6 <-plot_ly(x= low_ch$Food_Category,y=low_ch$tcholesterol,
color = low_ch$food_category,type="bar")%>%layout(title="Low Cholesterol Category",height=400)
p6
carb_content1<-subset_nutrition%>% select(restaurant,Food_Category,Carbohydrates)%>% group_by(Food_Category)%>%summarise(tcarb = sum(Carbohydrates))
carb_content1
carb_content1$fraction = carb_content1$tcarb / sum(carb_content1$tcarb)
carb_content1 = carb_content1[order(carb_content1$fraction), ]
carb_content1$ymax = cumsum(carb_content1$fraction)
carb_content1$ymin = c(0, head(carb_content1$ymax, n=-1))
p7 = ggplot(carb_content1, aes(fill=Food_Category, ymax=ymax, ymin=ymin, xmax=9, xmin=3)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 9)) +
theme(panel.grid=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.ticks=element_blank()) +
annotate("text", x = 0, y = 0, label = "Carbohydrates") +
labs(title="Carbohydrates content in Food Category")
p7
carb_content2<-subset_nutrition%>% select(restaurant,Food_Category,Carbohydrates)%>% group_by(restaurant)%>%summarise(tcarb = sum(Carbohydrates))
carb_content2
high_carb <- carb_content2%>%arrange(desc(tcarb))%>%head(26)
p8<-plot_ly(x= high_carb$restaurant,y=high_carb$tcarb,
color = high_carb$restaurant,type="bar")%>%layout(title="Carbohydrates content by Restaurant",height=400)
p8
##data$cleaning_fee[which(is.na(data$cleaning_fee))] = 0
sodium_content<-subset_nutrition%>% select(restaurant,Food_Category,Sodium)%>% group_by(Food_Category)%>%summarise(tsodium = sum(Sodium))
sodium_content
sodium_content$fraction = sodium_content$tsodium / sum(sodium_content$tsodium)
sodium_content = sodium_content[order(sodium_content$fraction), ]
sodium_content$ymax = cumsum(sodium_content$fraction)
sodium_content$ymin = c(0, head(sodium_content$ymax, n=-1))
p9 = ggplot(sodium_content, aes(fill=Food_Category, ymax=ymax, ymin=ymin, xmax=9, xmin=3)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 9)) +
theme(panel.grid=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.ticks=element_blank()) +
annotate("text", x = 0, y = 0, label = "Sodium") +
labs(title="Sodium content in Food Category")
p9
sugar_content<-subset_nutrition%>% select(restaurant,Food_Category,Sugar)%>% group_by(Food_Category)%>%summarise(tsugar = sum(Sugar))
sugar_content
p10 <- plot_ly(
x = sugar_content$tsugar,
y = sugar_content$Food_Category,
marker = list(color = new_col),
type = "bar"
)%>%
layout(xaxis = list(title = ""),
yaxis = list(title = ""),
autosize = T)
p10
sugar_content$fraction = sugar_content$tsugar / sum(sugar_content$tsugar)
sugar_content = sugar_content[order(sugar_content$fraction), ]
sugar_content$ymax = cumsum(sugar_content$fraction)
sugar_content$ymin = c(0, head(sugar_content$ymax, n=-1))
p11 = ggplot(sugar_content, aes(fill=Food_Category, ymax=ymax, ymin=ymin, xmax=9, xmin=3)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 9)) +
theme(panel.grid=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.ticks=element_blank()) +
annotate("text", x = 0, y = 0, label = "Sugar") +
labs(title="Sugar content in Food Category")
p11
sugar_content<-subset_nutrition%>% select(restaurant,Food_Category,Sugar)%>% group_by(restaurant)%>%summarise(tsugar = sum(Sugar))
sugar_content
high_sugar <- sugar_content%>%arrange(desc(tsugar))%>%head(26)
p12<-plot_ly(x= high_sugar$restaurant,y=high_sugar$tsugar,
color = high_sugar$restaurant,type="bar")%>%layout(title="Top High Sugar Restaurants",height=400)
p12
p13 <- plot_ly(x = subset_nutrition$Food_Category, y=subset_nutrition$Dietary_Fiber,color = subset_nutrition$Food_Category,colors =new_col , type = "bar") %>% layout(
xaxis = list(title = ""),
yaxis = list(title = ""),
showlegend=FALSE,
autosize = T)
p13
df_content<-subset_nutrition%>% select(restaurant,Food_Category,Dietary_Fiber)%>% group_by(restaurant)%>%summarise(tdf = sum(Dietary_Fiber))
df_content
high_df <- df_content%>%arrange(desc(tdf))%>%head(26)
p14<-plot_ly(x= high_df$restaurant,y=high_df$tdf,
color = high_df$restaurant,type="bar")%>%layout(title="Top High Dietary Fiber Restaurants",height=400)
p14
d1<-subset_nutrition%>%ggplot(aes(x=Sugar,y=Calories))+stat_density_2d(geom = "polygon", aes(fill = ..level..), h=c(100,1500) ,contour = T)+scale_fill_viridis(option="magma")
d2<-subset_nutrition%>%ggplot(aes(x=Carbohydrates,y=Calories))+stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(100,1500) ,contour = F)+scale_fill_viridis(option="magma")
d3<-subset_nutrition%>%ggplot(aes(x=Sodium,y=Calories))+stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(3000,1500) ,contour = F)+scale_fill_viridis(option="magma")
d4<-subset_nutrition%>%ggplot(aes(x=Cholesterol,y=Calories))+stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(600,1500) ,contour = F)+scale_fill_viridis(option="magma")
d5<-subset_nutrition%>%ggplot(aes(x=Dietary_Fiber,y=Calories))+scale_x_continuous(limits=c(0,8),expand=c(0,0))+stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,70) ,contour = FALSE)+scale_fill_viridis(option="magma")
grid.arrange(d1,d2,d3,d4,d5,nrow=3,ncol=2)
g1<-ggplot(subset_nutrition, aes(x=Cholesterol,y=Calories))+geom_point(col="hotpink")+geom_smooth(method="lm",col="hotpink")
g2<-ggplot(subset_nutrition, aes(x=Carbohydrates,y=Calories))+geom_point(col="navyblue")+geom_smooth(method="lm",col="navyblue")
g3<-ggplot(subset_nutrition, aes(x=Sugar,y=Calories))+geom_point(col="darkorchid4")+geom_smooth(method="lm",col="darkorchid4")
g4<-ggplot(subset_nutrition, aes(x=Total_Fat,y=Calories))+geom_point(col="magenta")+geom_smooth(method="lm",col="magenta")
g5<-ggplot(subset_nutrition, aes(x=Sodium,y=Calories))+geom_point(col="olivedrab4")+geom_smooth(method="lm",col="olivedrab4")
g6<-ggplot(subset_nutrition, aes(x=Protein,y=Calories))+geom_point(col="firebrick4")+geom_smooth(method="lm",col="firebrick4")
g7<-ggplot(subset_nutrition, aes(x=Saturated_Fat,y=Calories))+geom_point(col="orange4")+geom_smooth(method="lm",col="orange4")
g8<-ggplot(subset_nutrition, aes(x=Dietary_Fiber,y=Calories))+geom_point(col="tomato4")+geom_smooth(method="lm",col="tomato4")
g9<-ggplot(subset_nutrition, aes(x=Trans_Fat,y=Calories))+geom_point(col="slateblue4")+geom_smooth(method="lm",col="slateblue4")
g<- grid.arrange(g1,g2,g3,g4,g5,g6,g7,g8,nrow=3,ncol=3)
g
runApp('~/GitHub/Spring2020-Project2-group-8/hanbojiao/test')
load("C:/Users/jiaoh/Documents/GitHub/Spring2020-Project2-group-8/doc/.RData")
load("C:/Users/jiaoh/Documents/GitHub/Spring2020-Project2-group-8/doc/.RData")
load("C:/Users/jiaoh/Documents/GitHub/Spring2020-Project2-group-8/doc/.RData")
runApp()
runApp()
runApp('~/GitHub/Spring2020-Project2-group-8/hanbojiao/test')
library(shiny)
observeEvent(input$mapMarker_click, {
#if(!input$click_multi)
leafletProxy("mapMarker") %>% clearGroup(c("circles","centroids", 'locations'))
click <- input$mapMarker_click
clat <- click$lat
clong <- click$lng
radius <- input$click_radius
#output info
#output$click_coord <- renderText(paste("Latitude:",round(clat,7),", Longitude:",round(clong,7)))
locations_within_range <- locations_within(input$click_radius, clong, clat)
leafletProxy("mapMarker") %>%
setView(lng = clong, lat = clat, zoom = 15)
leafletProxy('mapMarker') %>%
addCircles(lng = clong, lat = clat, group = 'circles',
stroke = TRUE, radius = radius,
color = 'black', weight = 1
,fillOpacity = 0.5)%>%
addCircles(lng = clong, lat = clat, group = 'centroids', radius = 1, weight = 2,
color = 'black',fillColor = 'black',fillOpacity = 1)
leafletProxy('mapMarker', data = locations_within_range) %>%
addCircles(~Longitude,~Latitude, group = 'locations', stroke = F,
radius = 12, fillOpacity = 0.8,fillColor='red', label = as.character(locations_within_range$V1))
#crimes_within_range <- merge(crimes_within_range,crime_type,by = c("LAW_CAT_CD","LAW_CAT_CD"), all.y = F)
locations_within_range$Address <- paste(locations_within_range$BUILDING, " ", locations_within_range$STREET,
locations_within_range$BORO, ", New York", locations_within_range$ZIPCODE)
locations_within_range$Location <- locations_within_range$V1
output$table <- renderTable(locations_within_range[,c("Location", "Address")])
})
library(shiny); runApp('Map_tab.R')
