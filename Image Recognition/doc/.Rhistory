tinytex::install_tinytex()
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("randomForest")){
install.packages("randomForest")
}
if(!require("LncFinder")){
install.packages("LncFinder")
}
if(!require("gbm")){
install.packages("gbm")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(MASS)
library(tidyverse)
library(randomForest)
library(LncFinder)
library(gbm)
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("randomForest")){
install.packages("randomForest")
}
if(!require("LncFinder")){
install.packages("LncFinder")
}
if(!require("gbm")){
install.packages("gbm")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(MASS)
library(tidyverse)
library(randomForest)
library(LncFinder)
library(gbm)
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
k = c(50,100,150,200,250,300)
model_labels = paste("Boosted Decision Machine with number of trees K =", k)
#train-test split
info <- read.csv(train_label_path)
n <- nrow(info)
n_train <- round(n*(4/5), 0)
set.seed(0)
train_idx <- sample(info$Index, n_train, replace = F)
test_idx <- setdiff(info$Index,train_idx)
# n_files <- length(list.files(train_image_dir))
#
# image_list <- list()
# for(i in 1:100){
#    image_list[[i]] <- readImage(paste0(train_image_dir, sprintf("%04d", i), ".jpg"))
# }
#function to read fiducial points
#input: index
#output: matrix of fiducial points corresponding to the index
n_files <- length(list.files(train_image_dir))
readMat.matrix <- function(index){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:n_files, readMat.matrix)
save(fiducial_pt_list, file="../output/fiducial_pt_list.RData")
#Load visualization of cross validation results of svm
load("../output/err_svm.RData")
err_svm <- as.data.frame(err_svm)
colnames(err_svm) <- c("mean_error", "sd_error")
cost=seq(0.001, 0.01, length=10)
err_svm$cost = as.factor(cost)
err_svm %>%
ggplot(aes(x = cost, y = mean_error,
ymin = mean_error - sd_error, ymax = mean_error + sd_error)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
cost_best_svm <- cost[which.min(err_svm[,1])]
par_best_svm <- list(cost=cost_best_svm)
# Training
tm_train_svm=NA
tm_train_svm <- system.time(fit_train_svm <- svm_train(dat_train, par_best_svm, probability = TRUE))
fit_train_svm<-readRDS("../output/fit_train_svm.RDS")
# Testing
tm_test_svm=NA
tm_test_svm <- system.time(pred_svm <- svm_test(fit_train_svm, dat_test))
cat("Time for constructing training improved model features=", tm_feature_train_improved[1], "s \n")
