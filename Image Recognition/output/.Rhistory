View(dat_train)
cov(dat_train)
matrix(dat_train)
data<-matrix(dat_train)
data<-as_matrix(dat_train)
data<-as.matrix(dat_train)
dim(data)
is.factor(dat_train)
is.factor(dat_train[1,])
is.factor(dat_train[1,1])
summary(dat_train)
View(dat_train)
is(dat_train)
dat_train[1]
head(dat_train[1])
tail(dat_train[1])
tail(dat_train[[1]])
names(dat_train)
load("/Users/ran_lu/Desktop/fall2019-proj3-sec2--group6/output/feature_train.RData")
View(dat_train)
is(dat_train)
dat_train[,1]
emotion_idx
scale(dat_train)
knitr::opts_chunk$set(error = TRUE)
knitr::opts_chunk$set(cache = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
options(mc.cores = parallel::detectCores())
local_dir <- "~/Desktop/fall2019-proj3-sec2--group6/"
load(paste(local_dir,'feature_train.RData',sep = ''))
local_dir <- "~/Desktop/fall2019-proj3-sec2--group6/output/"
load(paste(local_dir,'feature_train.RData',sep = ''))
# normalize
df_train_X <- scale(dat_train[,!(names(dat_train) %in% 'emotion_idx')])
View(df_train_X)
dim(df_train_X)
names(df_train_X)
names(dat_train)
View(dat_train)
?princomp
df_train_Y <- dat_train$emotion_idx
# PCA on training
source(paste(local_dir,'pca_feature.R',sep = ''))
local_dir <- "~/Desktop/fall2019-proj3-sec2--group6/output/"
load(paste(local_dir,'feature_train.RData',sep = ''))
local_dir <- "~/Desktop/fall2019-proj3-sec2--group6/lib/"
# PCA on training
source(paste(local_dir,'pca_feature.R',sep = ''))
pca <- pca_feature(df_train_X,threshhold=0.99)
View(pca)
?prcomp
?scale
tail(names(dat_train))
dat_train_improved <- dat_train[,-"emotion_idx"]
dat_train_improved <- dat_train[,-"emotion_idx"]
dat_train_improved <- dat_train[,-6007]
#Using the inbuilt function
PCA_data <- prcomp(data, center = T, scale. = T)
data <- scale(dat_train_improved)
#Using the inbuilt function
PCA_data <- prcomp(data, center = T, scale. = T)
View(PCA_data)
df <- PCA_data$rotation[,1:200]
# combine PCA X, Y after PCA
pca_train <- data.frame(pca$data_X_transformed,emotion_idx=df_train_Y)
View(pca_train)
df <- PCA_data$x[,1:200]
View(df)
dim(df)
df2 <- PCA_data$rotation[,1:200]
dim(df2)
var <- PCA_data$sdev^2/sum(PCA_data$sdev^2)
cumsum(var)
cumsum(var)>0.99
which(cumsum(var)>0.99)
sum((cumsum(var)>0.99)==FALSE)
sum((cumsum(var)>0.99)==FALSE)+1
