install.packages('lsa')
install.packages("plyr")
knitr::opts_chunk$set(echo = TRUE,warning = FALSE,error = FALSE)
load("../output/mat_fac_als_a3.RData")
library(lsa)
library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
load("../output/mat_fac_als_a3.RData")
library(lsa)
library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
# result <- ALS(f = 10, lambda =0.1, max.iter = 5, data = data, train = data_train, test = data_test)
# save(result, file = "../output/mat_fac_als_a3.RData")
load("../output/mat_fac_als_a3.RData")
library(lsa)
library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
data_train$movieindex<-dense_rank(data_train$movieId)
data_train_linear<-as.data.frame(cbind(data_train$rating,r,w))
load("../output/mat_fac_als_a3.RData")
library(lsa)
library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
data_train$movieindex<-dense_rank(data_train$movieId)
data_train_linear<-as.data.frame(cbind(data_train$rating,r,w))
load("../output/mat_fac_als_a3.RData")
library(lsa)
library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
load("../output/mat_fac_als_a3.RData")
library(lsa)
library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
knitr::opts_chunk$set(echo = TRUE,warning = FALSE,error = FALSE)
library(plyr)
load("../output/mat_fac_als_a3.RData")
# library(lsa)
# library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
load("../output/mat_fac_als_a3.RData")
# library(lsa)
# library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
rating <- ddply(data,(movieId),ratingmean)
ratingmean<-function(data){
mean(data$rating)
}
rating <- ddply(data,.(movieId),ratingmean)
result <- ALS(f = 10, lambda =0.1,
max.iter = 5, data = data, train = data_train, test = data_test)
load("../output/mat_fac_als_a3.RData")
library(lsa)
library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
load("../output/mat_fac_als_a3.RData")
library(lsa)
library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
load("../output/mat_fac_als_a3.RData")
library(lsa)
library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
load("../output/mat_fac_als_a3.RData")
library(lsa)
library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
# result <- ALS(f = 10, lambda =0.1, max.iter = 5, data = data, train = data_train, test = data_test)
# save(result, file = "../output/mat_fac_als_a3.RData")
load("../output/mat_fac_als_a3.RData")
# library(lsa)
# library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating <- ddply(data,.(movieId),ratingmean)
load("../output/mat_fac_als_a3.RData")
# library(lsa)
# library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating <- ddply(data,.movieId,ratingmean)
data_train$movieindex<-dense_rank(data_train$movieId)
data_train$movieindex<-dense_rank(data_train$movieId)
install.packages("lsa")
install.packages("lsa")
library(lsa)
load("../output/mat_fac_als_a3.RData")
library(lsa)
library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
knitr::opts_chunk$set(echo = TRUE,warning = FALSE,error = FALSE,message = FALSE)
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read.csv("../data/ml-latest-small/ratings.csv")
set.seed(0)
## shuffle the row of the entire dataset
data <- data[sample(nrow(data)),]
## get a small dataset that contains all users and all movies
unique.user<-duplicated(data[,1])
unique.movie<-duplicated(data[,2])
index<-unique.user & unique.movie
all.user.movie <- data[!index,]
## split training and test on the rest
rest <- data[index,]
test_idx <- sample(rownames(rest), round(nrow(data)/5, 0))
train_idx <- setdiff(rownames(rest), test_idx)
## combine the training with the previous dataset, which has all users and all movies
data_train <- rbind(all.user.movie, data[train_idx,])
data_test <- data[test_idx,]
## sort the training and testing data by userId then by movieId,
## so when we update p and q, it is less likely to make mistakes
data_train <- arrange(data_train, userId, movieId)
data_test <- arrange(data_test, userId, movieId)
U <- length(unique(data$userId))
I <- length(unique(data$movieId))
source("../lib/ALS.R")
source("../lib/cr_ALS.R")
f_list <- seq(15, 25, 10)
l_list <- seq(-2,1,3)
f_l <- expand.grid(f_list, l_list)
f_l
result_summary <- array(NA, dim = c(nrow(f_l), 10, 4))
run_time <- system.time(for(i in 1:nrow(f_l)){
par <- paste("f = ", f_l[i,1], ", lambda = ", 10^f_l[i,2])
cat(par, "\n")
current_result <- cv.function(data, K = 5, f = f_l[i,1], lambda = 10^f_l[i,2])
result_summary[,,i] <- matrix(unlist(current_result), ncol = 10, byrow = T)
print(result_summary)
})
save(result_summary, file = "../output/rmse_als_a3.Rdata")
# result_summary <- array(NA, dim = c(nrow(f_l), 10, 4))
# run_time <- system.time(for(i in 1:nrow(f_l)){
#    par <- paste("f = ", f_l[i,1], ", lambda = ", 10^f_l[i,2])
#    cat(par, "\n")
#    current_result <- cv.function(data, K = 5, f = f_l[i,1], lambda = 10^f_l[i,2])
#    result_summary[,,i] <- matrix(unlist(current_result), ncol = 10, byrow = T)
#    print(result_summary)
})
# result_summary <- array(NA, dim = c(nrow(f_l), 10, 4))
# run_time <- system.time(for(i in 1:nrow(f_l)){
#    par <- paste("f = ", f_l[i,1], ", lambda = ", 10^f_l[i,2])
#    cat(par, "\n")
#    current_result <- cv.function(data, K = 5, f = f_l[i,1], lambda = 10^f_l[i,2])
#    result_summary[,,i] <- matrix(unlist(current_result), ncol = 10, byrow = T)
#    print(result_summary)
# })
save(result_summary, file = "../output/rmse_als_a3.Rdata")
load("../output/rmse_als_a3.Rdata")
rmse <- data.frame(rbind(t(result_summary[1,,]), t(result_summary[2,,])), train_test = rep(c("Train", "Test"), each = 4), par = rep(paste("f = ", f_l[,1], ", lambda = ", 10^f_l[,2]), times = 2)) %>% gather("epoch", "RMSE", -train_test, -par)
rmse$epoch <- as.numeric(gsub("X", "", rmse$epoch))
rmse %>% ggplot(aes(x = epoch, y = RMSE, col = train_test)) + geom_point() + facet_grid(~par)
result <- ALS(f = 25, lambda =10,
max.iter = 5, data = data, train = data_train, test = data_test)
# result <- ALS(f = 25, lambda =10,
#                    max.iter = 5, data = data, train = data_train, test = data_test)
save(result, file = "../output/mat_fac_als_a3.RData")
load("../output/mat_fac_als_a3.RData")
library(lsa)
library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
rating$index<-c(1:nrow(rating))
l_distance<-cosine(result$Movie)
diag(l_distance)<-0
data_train$movieindex<-dense_rank(data_train$movieId)
r<-rep(0,nrow(data_train))
for (i in 1:nrow(data_train)){
rowindex<-data_train$userId[i]
columindex<-data_train$movieindex[i]
qi <- as.matrix(result$User[,rowindex])
qj <- as.matrix(result$Movie[,columindex])
r[i]<-t(qi)%*%qj
}
w<-knn_r[data_train$movieindex]
load("../output/mat_fac_als_a3.RData")
library(lsa)
library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
rating$index<-c(1:nrow(rating))
l_distance<-cosine(result$Movie)
load("../output/mat_fac_als_a3.RData")
library(lsa)
library(plyr)
ratingmean<-function(data){
mean(data$rating)
}
rating<-ddply(data,.(movieId),ratingmean)
rating$index<-c(1:nrow(rating))
l_distance<-cosine(result$Movie)
diag(l_distance)<-0
source("../lib/cr_ALS.R")
f_list <- seq(15, 25, 10)
l_list <- seq(-2,1,3)
f_l <- expand.grid(f_list, l_list)
f_l
# result_summary <- array(NA, dim = c(nrow(f_l), 10, 4))
# run_time <- system.time(for(i in 1:nrow(f_l)){
#    par <- paste("f = ", f_l[i,1], ", lambda = ", 10^f_l[i,2])
#    cat(par, "\n")
#    current_result <- cv.function(data, K = 5, f = f_l[i,1], lambda = 10^f_l[i,2])
#    result_summary[,,i] <- matrix(unlist(current_result), ncol = 10, byrow = T)
#    print(result_summary)
# })
save(result_summary, file = "../output/rmse_als_a3.Rdata")
load("../output/rmse_als_a3.Rdata")
rmse <- data.frame(rbind(t(result_summary[1,,]), t(result_summary[2,,])), train_test = rep(c("Train", "Test"), each = 4), par = rep(paste("f = ", f_l[,1], ", lambda = ", 10^f_l[,2]), times = 2)) %>% gather("epoch", "RMSE", -train_test, -par)
rmse$epoch <- as.numeric(gsub("X", "", rmse$epoch))
rmse %>% ggplot(aes(x = epoch, y = RMSE, col = train_test)) + geom_point() + facet_grid(~par)
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read.csv("../data/ml-latest-small/ratings.csv")
set.seed(0)
## shuffle the row of the entire dataset
data <- data[sample(nrow(data)),]
## get a small dataset that contains all users and all movies
unique.user<-duplicated(data[,1])
unique.movie<-duplicated(data[,2])
index<-unique.user & unique.movie
all.user.movie <- data[!index,]
## split training and test on the rest
rest <- data[index,]
test_idx <- sample(rownames(rest), round(nrow(data)/5, 0))
train_idx <- setdiff(rownames(rest), test_idx)
## combine the training with the previous dataset, which has all users and all movies
data_train <- rbind(all.user.movie, data[train_idx,])
data_test <- data[test_idx,]
## sort the training and testing data by userId then by movieId,
## so when we update p and q, it is less likely to make mistakes
data_train <- arrange(data_train, userId, movieId)
data_test <- arrange(data_test, userId, movieId)
U <- length(unique(data$userId))
I <- length(unique(data$movieId))
source("../lib/ALS.R")
source("../lib/cr_ALS.R")
f_list <- seq(15, 25, 10)
l_list <- seq(-2,1,3)
f_l <- expand.grid(f_list, l_list)
f_l
result_summary <- array(NA, dim = c(nrow(f_l), 10, 4))
run_time <- system.time(for(i in 1:nrow(f_l)){
par <- paste("f = ", f_l[i,1], ", lambda = ", 10^f_l[i,2])
cat(par, "\n")
current_result <- cv.function(data, K = 5, f = f_l[i,1], lambda = 10^f_l[i,2])
result_summary[,,i] <- matrix(unlist(current_result), ncol = 10, byrow = T)
print(result_summary)
})
save(result_summary, file = "../output/rmse_als_a3.Rdata")
load("../output/rmse_als_a3.Rdata")
rmse <- data.frame(rbind(t(result_summary[1,,]), t(result_summary[2,,])), train_test = rep(c("Train", "Test"), each = 4), par = rep(paste("f = ", f_l[,1], ", lambda = ", 10^f_l[,2]), times = 2)) %>% gather("epoch", "RMSE", -train_test, -par)
rmse$epoch <- as.numeric(gsub("X", "", rmse$epoch))
rmse %>% ggplot(aes(x = epoch, y = RMSE, col = train_test)) + geom_point() + facet_grid(~par)
