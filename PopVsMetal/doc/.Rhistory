lyrics_token_pop$sentiment = plyr::mapvalues(lyrics_token_pop$word,
bing$word, bing$sentiment,
warn_missing = FALSE)
lyrics_token_pop$sentiment = if_else(!(lyrics_token_pop$sentiment %in% c('positive', 'negative')),
'neutral', lyrics_token_pop$sentiment)
sample_n(lyrics_token_pop, size = 15)
count_words <- count(lyrics_token_pop, word, sentiment, sort = TRUE)
gw <- group_by(lyrics_token, decade, sentiment, word) %>%
summarise(gw_c = n()) %>%
ungroup() %>%
group_by(decade) %>%
mutate(gw_p = gw_c / sum(gw_c)) %>%
ungroup() %>%
arrange(decade, desc(gw_p)) %>%
group_by(word) %>%
mutate(w_c = sum(gw_c))
w <- group_by(lyrics_token, sentiment, word) %>%
summarise(w_c = n()) %>%
ungroup() %>%
mutate(w_p = w_c / sum(w_c)) %>%
arrange(desc(w_c))
gw <- group_by(lyrics_token_pop, decade, sentiment, word) %>%
summarise(gw_c = n()) %>%
ungroup() %>%
group_by(decade) %>%
mutate(gw_p = gw_c / sum(gw_c)) %>%
ungroup() %>%
arrange(decade, desc(gw_p)) %>%
group_by(word) %>%
mutate(w_c = sum(gw_c))
w <- group_by(lyrics_token_pop, sentiment, word) %>%
summarise(w_c = n()) %>%
ungroup() %>%
mutate(w_p = w_c / sum(w_c)) %>%
arrange(desc(w_c))
View(temp1)
## World cloud sentiment in pop
temp4 <- group_by(gw, decade, sentiment) %>%
arrange(desc(gw_p)) %>%
filter(row_number() < 60) %>%
mutate(angle = 90 * sample(c(0, 1), n(), replace = TRUE, prob = c(70, 30)),
freq_sd = (gw_c - min(gw_c)) / (max(gw_c) - min(gw_c))) %>%
ungroup()
options(repr.plot.width = 10, repr.plot.height = 40)
plt1 <- ggplot(data = temp4,
aes(label = word,
size = freq_sd,
color = factor(sample.int(10, nrow(temp4), replace = TRUE)),
angle = angle)) +
geom_text_wordcloud_area() +
scale_size_area(max_size = 10) +
facet_wrap(decade ~ sentiment, nrow = 5) +
theme(text = element_text(size = 15))
#Run the follwing line in console for better plot sizing  because the figure is constrained in size in R note book.
suppressWarnings(print(plt1))
# The image below is saved in fig folder after running the code through console.
suppressWarnings(print(plt1))
#The bing emotion is a list of English words and their associations with three basic emotions (negative, positive, neutral)
lyrics_token_metal <- unnest_tokens(dt_lyrics,
input = lyrics,
output = word,
token = 'words',
drop = TRUE,
to_lower = TRUE)
lyrics_token_metal <- filter(lyrics_token_metal,
str_detect(word, '^[a-z]') &
(genre %in% c("Metal")) &
nchar(word) >= 3)
bing = get_sentiments('bing')
lyrics_token_metal$sentiment = plyr::mapvalues(lyrics_token_metal$word,
bing$word, bing$sentiment,
warn_missing = FALSE)
lyrics_token_metal$sentiment = if_else(!(lyrics_token_metal$sentiment %in% c('positive', 'negative')),
'neutral', lyrics_token_metal$sentiment)
sample_n(lyrics_token_metal, size = 15)
count_words <- count(lyrics_token_metal, word, sentiment, sort = TRUE)
gw1 <- group_by(lyrics_token_metal, decade, sentiment, word) %>%
summarise(gw_c = n()) %>%
ungroup() %>%
group_by(decade) %>%
mutate(gw_p = gw_c / sum(gw_c)) %>%
ungroup() %>%
arrange(decade, desc(gw_p)) %>%
group_by(word) %>%
mutate(w_c = sum(gw_c))
w1 <- group_by(lyrics_token_metal, sentiment, word) %>%
summarise(w_c = n()) %>%
ungroup() %>%
mutate(w_p = w_c / sum(w_c)) %>%
arrange(desc(w_c))
## Word cloud sentiment in Metal
temp5 <- group_by(gw1, decade, sentiment) %>%
arrange(desc(gw_p)) %>%
filter(row_number() < 60) %>%
mutate(angle = 90 * sample(c(0, 1), n(), replace = TRUE, prob = c(70, 30)),
freq_sd = (gw_c - min(gw_c)) / (max(gw_c) - min(gw_c))) %>%
ungroup()
options(repr.plot.width = 10, repr.plot.height = 40)
plt1 <- ggplot(data = temp5,
aes(label = word,
size = freq_sd,
color = factor(sample.int(10, nrow(temp5), replace = TRUE)),
angle = angle)) +
geom_text_wordcloud_area() +
scale_size_area(max_size = 10) +
facet_wrap(decade ~ sentiment, nrow = 5) +
theme(text = element_text(size = 15))
#Run the follwing line in console for better plot sizing  because the figure is constrained in size in R note book.
suppressWarnings(print(plt1))
# The image below is saved in fig folder after running the code through console.
wordcloud(word_count_metal_song_artist$word,word_count_metal_song_artist$n,
scale=c(5,0.2),
max.words=100,
min.freq=2,
random.order=FALSE,
rot.per=0.5,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Yellow"))
wordcloud(word_count_metal_song_artist$word,word_count_metal_song_artist$n,
scale=c(5,0.2),
max.words=100,
min.freq=2,
random.order=FALSE,
rot.per=0.5,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Yellows"))
wordcloud(word_count_metal_song_artist$word,word_count_metal_song_artist$n,
scale=c(5,0.2),
max.words=100,
min.freq=2,
random.order=FALSE,
rot.per=0.5,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Greens"))
wordcloud(word_count_metal_song$word,word_count_metal_song$n,
scale=c(5,0.2),
max.words=100,
min.freq=2,
random.order=FALSE,
rot.per=0.5,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Greens"))
View(temp2)
#The bing emotion is a list of English words and their associations with three basic emotions (negative, positive, neutral)
lyrics_token_metal <- unnest_tokens(dt_lyrics,
input = lyrics,
output = word,
token = 'words',
drop = TRUE,
to_lower = TRUE)
lyrics_token_metal <- filter(lyrics_token_metal,
str_detect(word, '^[a-z]') &
(genre %in% c("Metal")) &
nchar(word) >= 3)
bing = get_sentiments('bing')
lyrics_token_metal$sentiment = plyr::mapvalues(lyrics_token_metal$word,
bing$word, bing$sentiment,
warn_missing = FALSE)
lyrics_token_metal$sentiment = if_else(!(lyrics_token_metal$sentiment %in% c('positive', 'negative')),
'neutral', lyrics_token_metal$sentiment)
sample_n(lyrics_token_metal, size = 15)
count_words <- count(lyrics_token_metal, word, sentiment, sort = TRUE)
gw1 <- group_by(lyrics_token_metal, decade, sentiment, word) %>%
summarise(gw_c = n()) %>%
ungroup() %>%
group_by(decade) %>%
mutate(gw_p = gw_c / sum(gw_c)) %>%
ungroup() %>%
arrange(decade, desc(gw_p)) %>%
group_by(word) %>%
mutate(w_c = sum(gw_c))
w1 <- group_by(lyrics_token_metal, sentiment, word) %>%
summarise(w_c = n()) %>%
ungroup() %>%
mutate(w_p = w_c / sum(w_c)) %>%
arrange(desc(w_c))
## Word cloud sentiment in Metal
temp5 <- group_by(gw1, decade, sentiment) %>%
arrange(desc(gw_p)) %>%
filter(row_number() < 60) %>%
mutate(angle = 90 * sample(c(0, 1), n(), replace = TRUE, prob = c(70, 30)),
freq_sd = (gw_c - min(gw_c)) / (max(gw_c) - min(gw_c))) %>%
ungroup()
options(repr.plot.width = 10, repr.plot.height = 40)
plt1 <- ggplot(data = temp5,
aes(label = word,
size = freq_sd,
color = factor(sample.int(10, nrow(temp5), replace = TRUE)),
angle = angle)) +
geom_text_wordcloud_area() +
scale_size_area(max_size = 10) +
facet_wrap(decade ~ sentiment, nrow = 5) +
theme(text = element_text(size = 15))
#Run the follwing line in console for better plot sizing  because the figure is constrained in size in R note book.
suppressWarnings(print(plt1))
# The image below is saved in fig folder after running the code through console.
knitr::opts_chunk$set(echo = TRUE)
packages.used=c("tm", "tidytext","tidyverse","DT","wordcloud","scales","gridExtra","ngram","igraph","ggraph","rsconnect", "syuzhet", "ggwordcloud")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library(dplyr)
library(stringr)
library(tm)
library(tidytext)
library(tidyverse)
library(DT)
library(wordcloud)
library(scales)
library(gridExtra)
library(ngram)
library(igraph)
library(ggraph)
library(rsconnect)
library(data.table)
library(scales)
library(shiny)
library(syuzhet)
library(ggwordcloud)
# Load the processed text data along with artists information on contributors
# load lyrics data
dt_lyrics <- load('../output/processed_lyrics.RData')
# load artist information
dt_artist <- fread('../data/artists.csv')
## Number of pop songs and artists per decade
##Adding Decade information
dt_lyrics$decade <- paste(str_sub(dt_lyrics$year, 1, 3), '0', sep = '')
## Number of pop songs and artists per decade
##Adding Decade information
dt_lyrics(decade) <- paste(str_sub(dt_lyrics$year, 1, 3), '0', sep = '')
## Number of pop songs and artists per decade
##Adding Decade information
dt_lyrics(decade) <- paste(str_sub(dt_lyrics(year), 1, 3), '0', sep = '')
## Number of pop songs and artists per decade
##Adding Decade information
dt_lyrics['decade'] <- paste(str_sub(dt_lyrics[year], 1, 3), '0', sep = '')
## Number of pop songs and artists per decade
##Adding Decade information
dt_lyrics['decade'] <- paste(str_sub(dt_lyrics['year'], 1, 3), '0', sep = '')
temp  <- group_by(dt_lyrics, decade) %>%
filter(genre %in% c("Pop")) %>%
summarise(songs = n(),
artists = length(unique(artist))) %>%
arrange(desc(decade))
## Number of pop songs and artists per decade
##Adding Decade information
dt_lyrics['decade'] <- paste(str_sub(dt_lyrics['year'], 1, 3), '0', sep = '')
temp  <- group_by(dt_lyrics['decade']) %>%
filter(genre %in% c("Pop")) %>%
summarise(songs = n(),
artists = length(unique(artist))) %>%
arrange(desc(decade))
## Number of pop songs and artists per decade
##Adding Decade information
dt_lyrics['decade'] <- paste(str_sub(dt_lyrics['year'], 1, 3), '0', sep = '')
temp  <- group_by_(dt_lyrics['decade']) %>%
filter(genre %in% c("Pop")) %>%
summarise(songs = n(),
artists = length(unique(artist))) %>%
arrange(desc(decade))
## Number of pop songs and artists per decade
##Adding Decade information
dt_lyrics$decade <- paste(str_sub(dt_lyrics$year, 1, 3), '0', sep = '')
dt_lyrics
summary(dt_lyrics)
length(dt_lyrics)
# Load the processed text data along with artists information on contributors
# load lyrics data
dt_lyrics <- load('../output/processed_lyrics.RData')
# load artist information
dt_artist <- fread('../data/artists.csv')
length(dt_lyrics)
dt_artist
dt_lyrics
summary(dt_lyrics)
load('../output/processed_lyrics.RData')
data <- load('../output/processed_lyrics.RData')
View(dt_lyrics)
# Load the processed text data along with artists information on contributors
# load lyrics data
dt_lyrics <- load('../output/processed_lyrics.RData')
# load artist information
dt_artist <- fread('../data/artists.csv')
load('../output/processed_lyrics.RData')
View(dt_lyrics)
## Number of pop songs and artists per decade
##Adding Decade information
dt_lyrics$decade <- paste(str_sub(dt_lyrics$year, 1, 3), '0', sep = '')
temp  <- group_by(dt_lyrics, decade) %>%
filter(genre %in% c("Pop")) %>%
summarise(songs = n(),
artists = length(unique(artist))) %>%
arrange(desc(decade))
ggplot(data = temp, aes(x = decade, y = songs)) +
geom_bar(stat = 'identity', aes(fill = decade)) +
geom_label(aes(label = paste('songs:', songs, '\nartists: ', artists, sep = ''),
y = 1000, fill = decade), size = 4, hjust = 'left', alpha = 0.25) +
coord_flip() +
xlab('Decade') +
ylab('') +
labs(title = '                                  Total Pop Songs and Artists by Decade') +
theme(legend.position = 0,
text = element_text(size = 10),
axis.text.x = element_blank())
## Number of pop songs and artists per decade
temp1  <- group_by(dt_lyrics, decade) %>%
filter(genre %in% c("Metal")) %>%
summarise(songs = n(),
artists = length(unique(artist))) %>%
arrange(desc(decade))
ggplot(data = temp1, aes(x = decade, y = songs)) +
geom_bar(stat = 'identity', aes(fill = decade)) +
geom_label(aes(label = paste('songs:', songs, '\nartists: ', artists, sep = ''),
y = 1000, fill = decade), size = 4, hjust = 'left', alpha = 0.25) +
coord_flip() +
xlab('Decade') +
ylab('') +
labs(title = '                                  Total Metal Songs and Artists by Decade') +
theme(legend.position = 0,
text = element_text(size = 10),
axis.text.x = element_blank())
pop_song <- dt_lyrics[dt_lyrics$genre == "Pop",]
bag_of_words_pop_song <-  pop_song %>%
unnest_tokens(word, stemmedwords)
word_count_pop_song <- bag_of_words_pop_song %>%
count(word, sort = TRUE)
wordcloud(word_count_pop_song$word,word_count_pop_song$n,
scale=c(5,0.2),
max.words=100,
min.freq=2,
random.order=FALSE,
rot.per=0.5,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
metal_song <- dt_lyrics[dt_lyrics$genre == "Metal",]
bag_of_words_metal_song <-  metal_song %>%
unnest_tokens(word, stemmedwords)
word_count_metal_song <- bag_of_words_metal_song %>%
count(word, sort = TRUE)
wordcloud(word_count_metal_song$word,word_count_metal_song$n,
scale=c(5,0.2),
max.words=100,
min.freq=2,
random.order=FALSE,
rot.per=0.5,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Greens"))
temp2 <- count(dt_lyrics, genre, artist, sort = TRUE) %>%
group_by(genre) %>%
arrange(desc(n)) %>%
filter(row_number() <= 10) %>%
arrange(desc(genre), desc(n)) %>%
filter(genre %in% c("Pop"))
ggplot(temp2, aes(artist, n))+
geom_col() +
labs(title = "                       The Most Prolific Pop Artists of All Time")+
xlab(NULL) +
ylab("Number of songs")+
coord_flip()
temp3 <- count(dt_lyrics, genre, artist, sort = TRUE) %>%
group_by(genre) %>%
arrange(desc(n)) %>%
filter(row_number() <= 10) %>%
arrange(desc(genre), desc(n)) %>%
filter(genre %in% c("Metal"))
ggplot(temp3, aes(artist, n))+
geom_col() +
labs(title = "                       The Most Prolific Metal Artists of All Time")+
xlab(NULL) +
ylab("Number of songs")+
coord_flip()
pop_singers <- count(dt_lyrics, genre, artist, stemmedwords, sort = TRUE) %>%
group_by(genre) %>%
arrange(desc(n)) %>%
filter(row_number() <= 10) %>%
arrange(desc(genre), desc(n)) %>%
filter(genre %in% c("Pop"))
bag_of_words_pop_song_artirst <-  pop_singers %>%
unnest_tokens(word, stemmedwords)
word_count_pop_song_artist <- bag_of_words_pop_song_artirst %>%
count(word, sort = TRUE)
wordcloud(word_count_pop_song_artist$word,word_count_pop_song_artist$n,
scale=c(5,0.2),
max.words=100,
min.freq=2,
random.order=FALSE,
rot.per=0.5,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
metal_singers <- count(dt_lyrics, genre, artist, stemmedwords, sort = TRUE) %>%
group_by(genre) %>%
arrange(desc(n)) %>%
filter(row_number() <= 10) %>%
arrange(desc(genre), desc(n)) %>%
filter(genre %in% c("Metal"))
bag_of_words_metal_song_artist <-  metal_singers %>%
unnest_tokens(word, stemmedwords)
word_count_metal_song_artist <- bag_of_words_metal_song_artist %>%
count(word, sort = TRUE)
wordcloud(word_count_metal_song_artist$word,word_count_metal_song_artist$n,
scale=c(5,0.2),
max.words=100,
min.freq=2,
random.order=FALSE,
rot.per=0.5,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Greens"))
lyrics_token_pop <- unnest_tokens(dt_lyrics,
input = lyrics,
output = word,
token = 'words',
drop = TRUE,
to_lower = TRUE)
lyrics_token_pop <- filter(lyrics_token_pop,
str_detect(word, '^[a-z]') &
(genre %in% c("Pop")) &
nchar(word) >= 3)
bing = get_sentiments('bing')
lyrics_token_pop$sentiment = plyr::mapvalues(lyrics_token_pop$word,
bing$word, bing$sentiment,
warn_missing = FALSE)
lyrics_token_pop$sentiment = if_else(!(lyrics_token_pop$sentiment %in% c('positive', 'negative')),
'neutral', lyrics_token_pop$sentiment)
sample_n(lyrics_token_pop, size = 15)
count_words <- count(lyrics_token_pop, word, sentiment, sort = TRUE)
gw <- group_by(lyrics_token_pop, decade, sentiment, word) %>%
summarise(gw_c = n()) %>%
ungroup() %>%
group_by(decade) %>%
mutate(gw_p = gw_c / sum(gw_c)) %>%
ungroup() %>%
arrange(decade, desc(gw_p)) %>%
group_by(word) %>%
mutate(w_c = sum(gw_c))
w <- group_by(lyrics_token_pop, sentiment, word) %>%
summarise(w_c = n()) %>%
ungroup() %>%
mutate(w_p = w_c / sum(w_c)) %>%
arrange(desc(w_c))
## World cloud sentiment in pop
temp4 <- group_by(gw, decade, sentiment) %>%
arrange(desc(gw_p)) %>%
filter(row_number() < 60) %>%
mutate(angle = 90 * sample(c(0, 1), n(), replace = TRUE, prob = c(70, 30)),
freq_sd = (gw_c - min(gw_c)) / (max(gw_c) - min(gw_c))) %>%
ungroup()
options(repr.plot.width = 10, repr.plot.height = 40)
plt1 <- ggplot(data = temp4,
aes(label = word,
size = freq_sd,
color = factor(sample.int(10, nrow(temp4), replace = TRUE)),
angle = angle)) +
geom_text_wordcloud_area() +
scale_size_area(max_size = 10) +
facet_wrap(decade ~ sentiment, nrow = 5) +
theme(text = element_text(size = 15))
#Run the follwing line in console for better plot sizing  because the figure is constrained in size in R note book.
suppressWarnings(print(plt1))
# The image below is saved in fig folder after running the code through console.
#The bing emotion is a list of English words and their associations with three basic emotions (negative, positive, neutral)
lyrics_token_metal <- unnest_tokens(dt_lyrics,
input = lyrics,
output = word,
token = 'words',
drop = TRUE,
to_lower = TRUE)
lyrics_token_metal <- filter(lyrics_token_metal,
str_detect(word, '^[a-z]') &
(genre %in% c("Metal")) &
nchar(word) >= 3)
bing = get_sentiments('bing')
lyrics_token_metal$sentiment = plyr::mapvalues(lyrics_token_metal$word,
bing$word, bing$sentiment,
warn_missing = FALSE)
lyrics_token_metal$sentiment = if_else(!(lyrics_token_metal$sentiment %in% c('positive', 'negative')),
'neutral', lyrics_token_metal$sentiment)
sample_n(lyrics_token_metal, size = 15)
count_words <- count(lyrics_token_metal, word, sentiment, sort = TRUE)
## Word cloud sentiment in Metal
temp5 <- group_by(gw1, decade, sentiment) %>%
arrange(desc(gw_p)) %>%
filter(row_number() < 60) %>%
mutate(angle = 90 * sample(c(0, 1), n(), replace = TRUE, prob = c(70, 30)),
freq_sd = (gw_c - min(gw_c)) / (max(gw_c) - min(gw_c))) %>%
ungroup()
options(repr.plot.width = 10, repr.plot.height = 40)
plt1 <- ggplot(data = temp5,
aes(label = word,
size = freq_sd,
color = factor(sample.int(10, nrow(temp5), replace = TRUE)),
angle = angle)) +
geom_text_wordcloud_area() +
scale_size_area(max_size = 10) +
facet_wrap(decade ~ sentiment, nrow = 5) +
theme(text = element_text(size = 15))
#Run the follwing line in console for better plot sizing  because the figure is constrained in size in R note book.
suppressWarnings(print(plt1))
# The image below is saved in fig folder after running the code through console.
